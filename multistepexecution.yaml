apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  name: harness-pipeline-example
  title: Harness Pipeline Example
  description: Trigger and monitor a Harness pipeline execution
spec:
  owner: harness
  type: service
  parameters:
    - title: Pipeline Information
      required:
        - pipelineUrl
      properties:
        pipelineUrl:
          title: Pipeline URL
          type: string
          description: URL of the Harness pipeline to trigger
          ui:autofocus: true
        apiKeySecret:
          title: API Key Secret
          type: string
          description: Secret reference for Harness API key (e.g. ${HARNESS_API_KEY})
        apiKey:
          title: API Key
          type: string
          description: Plain text API key (not recommended for production)
          ui:widget: password
        hidePipelineURLLog:
          title: Hide Pipeline URL in Logs
          type: boolean
          default: false
        inputParameters:
          title: Input Parameters
          type: object
          description: Key-value pairs for pipeline input parameters
          default: {}

  steps:
    - id: triggerPipeline
      name: Trigger Harness Pipeline
      action: trigger:harness-custom-pipeline
      input:
        url: ${{ parameters.pipelineUrl }}
        apikey: ${{ parameters.apiKey }}
        apiKeySecret: ${{ parameters.apiKeySecret }}
        hidePipelineURLLog: ${{ parameters.hidePipelineURLLog }}
        inputset: ${{ parameters.inputParameters }}

    - id: logPipelineInfo
      name: Log Pipeline Information
      action: debug:log
      input:
        message: |
          Pipeline triggered successfully!
          Pipeline URL: ${{ steps.triggerPipeline.output.pipelineUrl }}
          Execution ID: ${{ steps.triggerPipeline.output.executionId }}

    - id: pollPipelineExecution
      name: Wait for Pipeline Completion
      action: poll:harness-pipeline-execution
      input:
        pollingApiUrl: ${{ steps.triggerPipeline.output.pollingApiUrl }}
        pipelineUrl: ${{ steps.triggerPipeline.output.pipelineUrl }}
        apikey: ${{ parameters.apiKey }}
        apiKeySecret: ${{ parameters.apiKeySecret }}
        accountIdentifier: ${{ steps.triggerPipeline.output.accountIdentifier }}
        showOutputVariables: true
        outputVariableParams:
          orgIdentifier: ${{ steps.triggerPipeline.output.orgIdentifier }}
          projectIdentifier: ${{ steps.triggerPipeline.output.projectIdentifier }}
          branchName: ${{ steps.triggerPipeline.output.branchName }}
          repoIdentifier: ${{ steps.triggerPipeline.output.repoIdentifier }}

    - id: displayResults
      name: Display Results
      action: debug:log
      input:
        message: |
          Pipeline execution completed with status: ${{ steps.pollPipelineExecution.output.status }}
          Output variables:
          ${{ steps.pollPipelineExecution.output.outputVariables | dump }}

  output:
    pipelineStatus:
      title: Pipeline Execution Status
      description: The status of the pipeline execution
      type: string
      value: ${{ steps.pollPipelineExecution.output.status }}
    pipelineUrl:
      title: Pipeline URL
      description: URL to view the pipeline execution
      type: string
      value: ${{ steps.triggerPipeline.output.pipelineUrl }}
    executionId:
      title: Execution ID
      description: The execution ID of the pipeline run
      type: string
      value: ${{ steps.pollPipelineExecution.output.executionId }}
    outputVariables:
      title: Output Variables
      description: Variables returned by the pipeline execution
      type: object
      value: ${{ steps.pollPipelineExecution.output.outputVariables }}
